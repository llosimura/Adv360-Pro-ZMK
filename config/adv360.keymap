#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>

#include "../zmk-nodefree-config/helper.h"
#include <../zmk-nodefree-config/keypos_def/keypos_adv360.h>

#define KEYS_L          LN0 LN1 LN2 LN3 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define THUMBS_LEFT     LH0 LH1 LH2
#define KEYS_R          RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS_RIGHT    RH0 RH1 RH2

#define DEF 0
#define SYM 1
#define MOD 2

#define XXX &none
#define ___ &trans


#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <145>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        global-quick-tap; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/ {
  behaviors {

    hm: homerow_mods {
        compatible = "zmk,behavior-hold-tap";
        label = "HOMEROW_MODS";
        #binding-cells = <2>;
        tapping-term-ms = <145>;
        quick-tap-ms = <125>;
        global-quick-tap;
        flavor = "balanced";
        bindings = <&kp>, <&kp>;
    };
  };

    keymap {
        compatible = "zmk,keymap";


        default_layer {
            bindings = <
         &none      &kp NUMBER_1              &kp N2          &kp N3          &kp N4   &kp N5                  &none                                                                     &none   &kp N6           &kp N7           &kp N8               &kp N9                     &kp N0     &none
    &caps_word             &kp Q               &kp W           &kp E           &kp R    &kp T                  &none                                                                     &none    &kp Y            &kp U            &kp I                &kp O                      &kp P  &kp BSLH
 &kp BACKSPACE  &hm LEFT_SHIFT A  &hm LEFT_CONTROL S  &hm LEFT_ALT D  &hm LEFT_GUI F  &lt 1 G                  &none    &kp ESC      &none                      &none  &kp ESCAPE        &none  &lt 1 H  &hm RIGHT_GUI J  &hm RIGHT_ALT K  &hm RIGHT_CONTROL L  &hm RIGHT_SHIFT SEMICOLON   &kp SQT
  &kp CAPSLOCK             &kp Z               &kp X           &kp C           &kp V    &kp B                                        &none                      &none                             &kp N            &kp M        &kp COMMA              &kp DOT                   &kp FSLH     &none
         &none             &none               &none        &kp LEFT       &kp RIGHT                     &lt 1 SPACE  &lt 2 TAB  &kp GRAVE                  &kp GRAVE   &lt 2 F12  &lt 1 ENTER                    &kp UP         &kp DOWN                &none                      &none     &none
            >;
        };

        layer_SYMBOLS {
            bindings = <
  &none     &kp F1          &kp F2                &kp F3                 &kp F4  &kp F5             &none                                                   &none  &kp F6         &kp F7         &kp F8             &kp F9          &kp F10  &kp F11
 &trans   &kp PLUS       &kp MINUS        &kp LEFT_BRACE        &kp RIGHT_BRACE  &trans             &none                                                   &none  &trans         &trans         &trans             &trans           &trans  &kp F12
 &trans  &kp EQUAL  &kp UNDERSCORE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans             &none  &trans  &trans                  &trans  &trans   &none  &trans  &kp RIGHT_GUI  &kp RIGHT_ALT  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT   &trans
 &trans     &trans          &trans      &kp LEFT_BRACKET      &kp RIGHT_BRACKET  &trans                            &trans                  &trans                  &trans         &trans         &trans             &trans           &trans   &trans
 &trans     &trans          &trans         &kp LESS_THAN       &kp GREATER_THAN                    &trans  &trans  &trans                  &trans  &trans  &trans                 &trans         &trans             &trans           &trans   &trans
            >;
        };

        layer_mod {
            bindings = <
  &none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                  &none                                                        &none   &none              &none             &none            &none   &none   &none
  &none         &none         &none         &none         &none         &none            &bootloader                                                  &bootloader   &none  &kp C_VOLUME_DOWN        &kp C_MUTE  &kp C_VOLUME_UP   &none   &none
  &none         &none    &bt BT_CLR    &bt BT_PRV    &bt BT_NXT         &none                  &none   &none   &none                   &none   &none        &none   &none         &kp C_PREV  &kp C_PLAY_PAUSE       &kp C_NEXT   &none   &none
  &none         &none         &none         &none         &none         &none                                  &none                   &none                        &none         &bl BL_DEC        &bl BL_TOG       &bl BL_INC   &none   &none
  &none         &none         &none         &none         &none                                &none   &none   &none                   &none   &none        &none                      &none             &none            &none   &none   &none
            >;
        };

    };
};
